Transform: AWS::Serverless-2016-10-31
Description: This is a template to create ETL pipeline pattern with AWS Step Functions
Parameters:
  pS3BucketName:
    Type: String
    Description: Unique S3 bucket to create
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_-]*'
  pStageFolder:
    Type: String
    Description: Folder to store staging files
    Default: stage
  pTransformFolder:
    Type: String
    Description: Folder to store transformed dataset
    Default: transform
  pArchiveFolder:
    Type: String
    Description: Folder to store archived dataset
    Default: archive
  pErrorFolder:
    Type: String
    Description: Folder to store dataset for any error
    Default: error
  pSourceFolder:
    Type: String
    Description: Source Folder to upload raw csv dataset to trigger the AWS Step functions
    Default: source
Resources:
  S3CustomResource:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - LambdaFunctionS3Object
        - Arn
      the_bucket:
        Ref: S3Bucket
      dirs_to_create:
        Fn::Join:
        - ','
        - - Ref: pSourceFolder
          - Ref: pStageFolder
          - Ref: pErrorFolder
          - Ref: pArchiveFolder
          - Ref: pTransformFolder
      file_prefix: glue/gluejob.py
      file_content:
        Fn::Sub: "import sys\nfrom awsglue.transforms import *\nfrom awsglue.utils\
          \ import getResolvedOptions\nfrom pyspark.context import SparkContext\n\
          from awsglue.context import GlueContext\nfrom awsglue.job import Job\n\n\
          args = getResolvedOptions(sys.argv, ['JOB_NAME'])\n\nsc = SparkContext()\n\
          glueContext = GlueContext(sc)\nspark = glueContext.spark_session\njob =\
          \ Job(glueContext)\njob.init(args['JOB_NAME'], args)\ndatasource0 = glueContext.create_dynamic_frame.from_catalog(database\
          \ = \"${GlueDB}\", table_name = \"${pStageFolder}\", transformation_ctx\
          \ = \"datasource0\")\napplymapping1 = ApplyMapping.apply(frame = datasource0,\
          \ mappings = [(\"date\", \"string\", \"date\", \"string\"), (\"description\"\
          , \"string\", \"description\", \"string\"), (\"deposits\", \"double\", \"\
          deposits\", \"double\"), (\"withdrawls\", \"double\", \"withdrawls\", \"\
          double\"), (\"balance\", \"double\", \"balance\", \"double\"), (\"year\"\
          , \"long\", \"year\", \"int\"), (\"month\", \"long\", \"month\", \"int\"\
          ), (\"day\", \"long\", \"day\", \"int\")], transformation_ctx = \"applymapping1\"\
          )\nresolvechoice2 = ResolveChoice.apply(frame = applymapping1, choice =\
          \ \"make_struct\", transformation_ctx = \"resolvechoice2\")\n\ndropnullfields3\
          \ = DropNullFields.apply(frame = resolvechoice2, transformation_ctx = \"\
          dropnullfields3\")\n\ndatasink4 = glueContext.write_dynamic_frame.from_options(frame\
          \ = dropnullfields3, connection_type = \"s3\", format_options = {\"compression\"\
          : \"snappy\"}, connection_options = {\"path\": \"s3://${pS3BucketName}/${pTransformFolder}\"\
          ,\"partitionKeys\":[\"year\",\"month\",\"day\"]}, format = \"glueparquet\"\
          , transformation_ctx = \"datasink4\")\njob.commit()\n"
  BasicLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - Ref: BasicManagedPolicyforlambda
  BasicManagedPolicyforlambda:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: This is sample CFN template
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: s3listaccess
          Effect: Allow
          Action:
          - s3:List*
          Resource:
            Fn::Sub: arn:aws:s3:::${pS3BucketName}
        - Sid: s3putaccess
          Effect: Allow
          Action:
          - s3:Get*
          - s3:Put*
          - s3:Delete*
          Resource:
            Fn::Sub: arn:aws:s3:::${pS3BucketName}/*
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - Ref: ManagedPolicyforlambda
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ManagedPolicyforlambda:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: This is sample CFN template
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: s3listaccess
          Effect: Allow
          Action:
          - s3:List*
          Resource:
            Fn::Sub: arn:aws:s3:::${pS3BucketName}
        - Sid: s3putaccess
          Effect: Allow
          Action:
          - s3:Get*
          - s3:Put*
          - s3:Delete*
          Resource:
            Fn::Sub: arn:aws:s3:::${pS3BucketName}/*
        - Sid: s3deletebucket
          Effect: Allow
          Action:
          - s3:DeleteBucket
          Resource:
            Fn::Sub: arn:aws:s3:::${pS3BucketName}
        - Sid: glue
          Effect: Allow
          Action: glue:*
          Resource:
          - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDB}
          - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueDB}/*
          - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
  GlueDB:
    Type: AWS::Glue::Database
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseInput:
        Description: Glue Database
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketName:
        Fn::Sub: ${pS3BucketName}
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Filter:
            S3Key:
              Rules:
              - Name: prefix
                Value:
                  Fn::Sub: ${pSourceFolder}/
              - Name: suffix
                Value: .csv
          Function:
            Fn::GetAtt:
            - StartStepFunction
            - Arn
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      SourceAccount:
        Fn::Sub: ${AWS::AccountId}
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - StartStepFunction
        - Arn
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::${pS3BucketName}
  StartStepFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - BasicLambdaRole
        - Arn
      Handler: start_step_function.lambda_handler
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-j6n3snzjy83s/06d5089a8210c218d5a17ee0be1842f0
      Runtime: python3.9
      Timeout: 60
  LambdaFunctionS3Object:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
      - Ref: LambdaLayer
      Description: Work with S3 Buckets!
      Handler: s3object.handler
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-j6n3snzjy83s/06d5089a8210c218d5a17ee0be1842f0
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Timeout: 360
      Runtime: python3.9
  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: cfnresource-lib
      Description: My layer
      ContentUri: s3://aws-sam-cli-managed-default-samclisourcebucket-j6n3snzjy83s/dcfdf8676dbf4c9b3388cd8a32ccf93b
      CompatibleRuntimes:
      - python3.9
      - python3.8
      - python3.7
      LicenseInfo: MIT
